-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Backwards-compatible orphan instances for base
--   
--   <tt>base-orphans</tt> defines orphan instances that mimic instances
--   available in later versions of <tt>base</tt> to a wider (older) range
--   of compilers. <tt>base-orphans</tt> does not export anything except
--   the orphan instances themselves and complements
--   <tt>&lt;<a>http://hackage.haskell.org/package/base-compat</a>
--   base-compat&gt;</tt>.
--   
--   See the README for what instances are covered:
--   <a>https://github.com/haskell-compat/base-orphans#readme</a>. See also
--   the <a>what is not covered</a> section.
@package base-orphans
@version 0.9.3


-- | Exports orphan instances that mimic instances available in later
--   versions of <tt>base</tt>. To use them, simply <tt>import Data.Orphans
--   ()</tt>.
module Data.Orphans
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Enum.Enum (f (g a)) => GHC.Enum.Enum (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Enum.Bounded (f (g a)) => GHC.Enum.Bounded (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Num.Num (f (g a)) => GHC.Num.Num (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Real.Real (f (g a)) => GHC.Real.Real (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Real.Integral (f (g a)) => GHC.Real.Integral (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Real.Fractional (f (g a)) => GHC.Real.Fractional (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Float.Floating (f (g a)) => GHC.Float.Floating (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Real.RealFrac (f (g a)) => GHC.Real.RealFrac (Data.Functor.Compose.Compose f g a)
instance forall k k1 (f :: k -> *) (g :: k1 -> k) (a :: k1). GHC.Float.RealFloat (f (g a)) => GHC.Float.RealFloat (Data.Functor.Compose.Compose f g a)
instance GHC.Classes.Eq (GHC.TypeLits.SChar c)
instance GHC.Classes.Ord (GHC.TypeLits.SChar c)
instance GHC.Classes.Eq (GHC.TypeNats.SNat n)
instance GHC.Classes.Ord (GHC.TypeNats.SNat n)
instance GHC.Classes.Eq (GHC.TypeLits.SSymbol s)
instance GHC.Classes.Ord (GHC.TypeLits.SSymbol s)
instance GHC.Base.Monoid a => Control.Monad.Fix.MonadFix ((,) a)
instance Data.Functor.Classes.Eq1 GHC.Generics.V1
instance Data.Functor.Classes.Ord1 GHC.Generics.V1
instance Data.Functor.Classes.Show1 GHC.Generics.V1
instance Data.Functor.Classes.Read1 GHC.Generics.V1
instance Data.Functor.Classes.Eq1 GHC.Generics.U1
instance Data.Functor.Classes.Ord1 GHC.Generics.U1
instance Data.Functor.Classes.Show1 GHC.Generics.U1
instance Data.Functor.Classes.Read1 GHC.Generics.U1
instance Data.Functor.Classes.Eq1 GHC.Generics.Par1
instance Data.Functor.Classes.Ord1 GHC.Generics.Par1
instance Data.Functor.Classes.Show1 GHC.Generics.Par1
instance Data.Functor.Classes.Read1 GHC.Generics.Par1
instance Data.Functor.Classes.Eq1 f => Data.Functor.Classes.Eq1 (GHC.Generics.Rec1 f)
instance Data.Functor.Classes.Ord1 f => Data.Functor.Classes.Ord1 (GHC.Generics.Rec1 f)
instance Data.Functor.Classes.Show1 f => Data.Functor.Classes.Show1 (GHC.Generics.Rec1 f)
instance Data.Functor.Classes.Read1 f => Data.Functor.Classes.Read1 (GHC.Generics.Rec1 f)
instance GHC.Classes.Eq c => Data.Functor.Classes.Eq1 (GHC.Generics.K1 i c)
instance GHC.Classes.Ord c => Data.Functor.Classes.Ord1 (GHC.Generics.K1 i c)
instance GHC.Show.Show c => Data.Functor.Classes.Show1 (GHC.Generics.K1 i c)
instance GHC.Read.Read c => Data.Functor.Classes.Read1 (GHC.Generics.K1 i c)
instance Data.Functor.Classes.Eq1 f => Data.Functor.Classes.Eq1 (GHC.Generics.M1 i c f)
instance Data.Functor.Classes.Ord1 f => Data.Functor.Classes.Ord1 (GHC.Generics.M1 i c f)
instance Data.Functor.Classes.Show1 f => Data.Functor.Classes.Show1 (GHC.Generics.M1 i c f)
instance Data.Functor.Classes.Read1 f => Data.Functor.Classes.Read1 (GHC.Generics.M1 i c f)
instance (Data.Functor.Classes.Eq1 f, Data.Functor.Classes.Eq1 g) => Data.Functor.Classes.Eq1 (f GHC.Generics.:+: g)
instance (Data.Functor.Classes.Ord1 f, Data.Functor.Classes.Ord1 g) => Data.Functor.Classes.Ord1 (f GHC.Generics.:+: g)
instance (Data.Functor.Classes.Show1 f, Data.Functor.Classes.Show1 g) => Data.Functor.Classes.Show1 (f GHC.Generics.:+: g)
instance (Data.Functor.Classes.Read1 f, Data.Functor.Classes.Read1 g) => Data.Functor.Classes.Read1 (f GHC.Generics.:+: g)
instance (Data.Functor.Classes.Eq1 f, Data.Functor.Classes.Eq1 g) => Data.Functor.Classes.Eq1 (f GHC.Generics.:*: g)
instance (Data.Functor.Classes.Ord1 f, Data.Functor.Classes.Ord1 g) => Data.Functor.Classes.Ord1 (f GHC.Generics.:*: g)
instance (Data.Functor.Classes.Show1 f, Data.Functor.Classes.Show1 g) => Data.Functor.Classes.Show1 (f GHC.Generics.:*: g)
instance (Data.Functor.Classes.Read1 f, Data.Functor.Classes.Read1 g) => Data.Functor.Classes.Read1 (f GHC.Generics.:*: g)
instance (Data.Functor.Classes.Eq1 f, Data.Functor.Classes.Eq1 g) => Data.Functor.Classes.Eq1 (f GHC.Generics.:.: g)
instance (Data.Functor.Classes.Ord1 f, Data.Functor.Classes.Ord1 g) => Data.Functor.Classes.Ord1 (f GHC.Generics.:.: g)
instance (Data.Functor.Classes.Show1 f, Data.Functor.Classes.Show1 g) => Data.Functor.Classes.Show1 (f GHC.Generics.:.: g)
instance (Data.Functor.Classes.Read1 f, Data.Functor.Classes.Read1 g) => Data.Functor.Classes.Read1 (f GHC.Generics.:.: g)
instance Data.Functor.Classes.Eq1 GHC.Generics.UAddr
instance Data.Functor.Classes.Ord1 GHC.Generics.UAddr
instance Data.Functor.Classes.Show1 GHC.Generics.UAddr
instance Data.Functor.Classes.Eq1 GHC.Generics.UChar
instance Data.Functor.Classes.Ord1 GHC.Generics.UChar
instance Data.Functor.Classes.Show1 GHC.Generics.UChar
instance Data.Functor.Classes.Eq1 GHC.Generics.UDouble
instance Data.Functor.Classes.Ord1 GHC.Generics.UDouble
instance Data.Functor.Classes.Show1 GHC.Generics.UDouble
instance Data.Functor.Classes.Eq1 GHC.Generics.UFloat
instance Data.Functor.Classes.Ord1 GHC.Generics.UFloat
instance Data.Functor.Classes.Show1 GHC.Generics.UFloat
instance Data.Functor.Classes.Eq1 GHC.Generics.UInt
instance Data.Functor.Classes.Ord1 GHC.Generics.UInt
instance Data.Functor.Classes.Show1 GHC.Generics.UInt
instance Data.Functor.Classes.Eq1 GHC.Generics.UWord
instance Data.Functor.Classes.Ord1 GHC.Generics.UWord
instance Data.Functor.Classes.Show1 GHC.Generics.UWord
instance forall k (p :: k). GHC.Show.Show (GHC.Generics.UAddr p)
